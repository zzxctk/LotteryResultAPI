// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var MyGame = MyGame || {};

/**
 * @enum {number}
 */
MyGame.Color = {
  Red: 1,
  Green: 2,
  Blue: 3
};

/**
 * @enum {string}
 */
MyGame.ColorName = {
  1: 'Red',
  2: 'Green',
  3: 'Blue'
};

/**
 *union Any { Monster, Weapon, Pickup }
 *
 * @enum {number}
 */
MyGame.Any = {
  NONE: 0,
  Monster: 1,
  Weapon: 2
};

/**
 *union Any { Monster, Weapon, Pickup }
 *
 * @enum {string}
 */
MyGame.AnyName = {
  0: 'NONE',
  1: 'Monster',
  2: 'Weapon'
};

/**
 * @constructor
 */
MyGame.Vec3 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Vec3}
 */
MyGame.Vec3.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
MyGame.Vec3.prototype.x = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
MyGame.Vec3.prototype.y = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
MyGame.Vec3.prototype.z = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} x
 * @param {number} y
 * @param {number} z
 * @returns {flatbuffers.Offset}
 */
MyGame.Vec3.createVec3 = function(builder, x, y, z) {
  builder.prep(4, 12);
  builder.writeFloat32(z);
  builder.writeFloat32(y);
  builder.writeFloat32(x);
  return builder.offset();
};

/**
 * 注释
 *
 * @constructor
 */
MyGame.Monster = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Monster}
 */
MyGame.Monster.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Monster=} obj
 * @returns {MyGame.Monster}
 */
MyGame.Monster.getRootAsMonster = function(bb, obj) {
  return (obj || new MyGame.Monster).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
MyGame.Monster.prototype.GameID = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
MyGame.Monster.prototype.Bnx = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {MyGame.Vec3=} obj
 * @returns {MyGame.Vec3|null}
 */
MyGame.Monster.prototype.pos = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? (obj || new MyGame.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
MyGame.Monster.prototype.mana = function() {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
};

/**
 * @returns {number}
 */
MyGame.Monster.prototype.hp = function() {
  var offset = this.bb.__offset(this.bb_pos, 12);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
MyGame.Monster.prototype.name = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 14);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {number} index
 * @returns {number}
 */
MyGame.Monster.prototype.inventory = function(index) {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.readUint8(this.bb.__vector(this.bb_pos + offset) + index) : 0;
};

/**
 * @returns {number}
 */
MyGame.Monster.prototype.inventoryLength = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;
};

/**
 * @returns {Uint8Array}
 */
MyGame.Monster.prototype.inventoryArray = function() {
  var offset = this.bb.__offset(this.bb_pos, 18);
  return offset ? new Uint8Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;
};

/**
 * @returns {MyGame.Color}
 */
MyGame.Monster.prototype.color = function() {
  var offset = this.bb.__offset(this.bb_pos, 20);
  return offset ? /** @type {MyGame.Color} */ (this.bb.readInt8(this.bb_pos + offset)) : MyGame.Color.Blue;
};

/**
 * @returns {MyGame.Any}
 */
MyGame.Monster.prototype.testType = function() {
  var offset = this.bb.__offset(this.bb_pos, 22);
  return offset ? /** @type {MyGame.Any} */ (this.bb.readUint8(this.bb_pos + offset)) : MyGame.Any.NONE;
};

/**
 * @param {flatbuffers.Table} obj
 * @returns {?flatbuffers.Table}
 */
MyGame.Monster.prototype.test = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 24);
  return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.Monster.startMonster = function(builder) {
  builder.startObject(11);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} GameID
 */
MyGame.Monster.addGameID = function(builder, GameID) {
  builder.addFieldInt32(0, GameID, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} BnxOffset
 */
MyGame.Monster.addBnx = function(builder, BnxOffset) {
  builder.addFieldOffset(1, BnxOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 */
MyGame.Monster.addPos = function(builder, posOffset) {
  builder.addFieldStruct(2, posOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} mana
 */
MyGame.Monster.addMana = function(builder, mana) {
  builder.addFieldInt16(3, mana, 150);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} hp
 */
MyGame.Monster.addHp = function(builder, hp) {
  builder.addFieldInt16(4, hp, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} nameOffset
 */
MyGame.Monster.addName = function(builder, nameOffset) {
  builder.addFieldOffset(5, nameOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} inventoryOffset
 */
MyGame.Monster.addInventory = function(builder, inventoryOffset) {
  builder.addFieldOffset(7, inventoryOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {Array.<number>} data
 * @returns {flatbuffers.Offset}
 */
MyGame.Monster.createInventoryVector = function(builder, data) {
  builder.startVector(1, data.length, 1);
  for (var i = data.length - 1; i >= 0; i--) {
    builder.addInt8(data[i]);
  }
  return builder.endVector();
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} numElems
 */
MyGame.Monster.startInventoryVector = function(builder, numElems) {
  builder.startVector(1, numElems, 1);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {MyGame.Color} color
 */
MyGame.Monster.addColor = function(builder, color) {
  builder.addFieldInt8(8, color, MyGame.Color.Blue);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {MyGame.Any} testType
 */
MyGame.Monster.addTestType = function(builder, testType) {
  builder.addFieldInt8(9, testType, MyGame.Any.NONE);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} testOffset
 */
MyGame.Monster.addTest = function(builder, testOffset) {
  builder.addFieldOffset(10, testOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.Monster.endMonster = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} GameID
 * @param {flatbuffers.Offset} BnxOffset
 * @param {flatbuffers.Offset} posOffset
 * @param {number} mana
 * @param {number} hp
 * @param {flatbuffers.Offset} nameOffset
 * @param {flatbuffers.Offset} inventoryOffset
 * @param {MyGame.Color} color
 * @param {MyGame.Any} testType
 * @param {flatbuffers.Offset} testOffset
 * @returns {flatbuffers.Offset}
 */
MyGame.Monster.createMonster = function(builder, GameID, BnxOffset, posOffset, mana, hp, nameOffset, inventoryOffset, color, testType, testOffset) {
  MyGame.Monster.startMonster(builder);
  MyGame.Monster.addGameID(builder, GameID);
  MyGame.Monster.addBnx(builder, BnxOffset);
  MyGame.Monster.addPos(builder, posOffset);
  MyGame.Monster.addMana(builder, mana);
  MyGame.Monster.addHp(builder, hp);
  MyGame.Monster.addName(builder, nameOffset);
  MyGame.Monster.addInventory(builder, inventoryOffset);
  MyGame.Monster.addColor(builder, color);
  MyGame.Monster.addTestType(builder, testType);
  MyGame.Monster.addTest(builder, testOffset);
  return MyGame.Monster.endMonster(builder);
}

/**
 * @constructor
 */
MyGame.Weapon = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {MyGame.Weapon}
 */
MyGame.Weapon.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {MyGame.Weapon=} obj
 * @returns {MyGame.Weapon}
 */
MyGame.Weapon.getRootAsWeapon = function(bb, obj) {
  return (obj || new MyGame.Weapon).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @param {MyGame.Vec3=} obj
 * @returns {MyGame.Vec3|null}
 */
MyGame.Weapon.prototype.pos = function(obj) {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? (obj || new MyGame.Vec3).__init(this.bb_pos + offset, this.bb) : null;
};

/**
 * @returns {number}
 */
MyGame.Weapon.prototype.mana = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt16(this.bb_pos + offset) : 150;
};

/**
 * @param {flatbuffers.Builder} builder
 */
MyGame.Weapon.startWeapon = function(builder) {
  builder.startObject(2);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 */
MyGame.Weapon.addPos = function(builder, posOffset) {
  builder.addFieldStruct(0, posOffset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} mana
 */
MyGame.Weapon.addMana = function(builder, mana) {
  builder.addFieldInt16(1, mana, 150);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
MyGame.Weapon.endWeapon = function(builder) {
  var offset = builder.endObject();
  return offset;
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} offset
 */
MyGame.Weapon.finishWeaponBuffer = function(builder, offset) {
  builder.finish(offset);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} posOffset
 * @param {number} mana
 * @returns {flatbuffers.Offset}
 */
MyGame.Weapon.createWeapon = function(builder, posOffset, mana) {
  MyGame.Weapon.startWeapon(builder);
  MyGame.Weapon.addPos(builder, posOffset);
  MyGame.Weapon.addMana(builder, mana);
  return MyGame.Weapon.endWeapon(builder);
}

// Exports for Node.js and RequireJS
this.MyGame = MyGame;
